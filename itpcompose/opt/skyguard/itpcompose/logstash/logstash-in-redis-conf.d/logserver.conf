input {
    udp {
        type => "syslog"
        port => 5000
        workers => 3
        queue_size => 72000
        receive_buffer_bytes => 31457280
    }
}

filter {
    grok {
        match => {
            "message" => ['%{SYSLOGLINE}']
        }
        overwrite => ["message"]
    }

    ruby {
        code => '
            unless event.get("program").nil?
                event.set("program", event.get("program").downcase)
                #if event.get("program") == "postfix/smtp"
                #    event.set("program", "seg")
                #end
            end
        '
    }

    mutate {
        rename => { "type" => "log_type" }
    }

    #if [program] == "postfix/smtp" {
    if [program] =~ "^postfix.*$"  {
        if [program] == "postfix/smtp" or [program] == "postfix/policy" {
            # mutate {
            #     add_field => {
            #         "topic" => "%{program}"
            #     }
            # }
            mutate {
                replace => { "program" => "seg" }
            }
        }
        else {
            drop { }
        }
    }
}


output {
    #stdout { codec => rubydebug }
    if [log_type] == "syslog" {
        if [program] == "dns" {
            kafka {
                bootstrap_servers => "172.238.238.237:9092"
                topic_id => "dns-original"
                codec => "json"
            }
        }
        else if [program] == "ssl" {
            kafka {
                bootstrap_servers => "172.238.238.237:9092"
                topic_id => "ssl-original"
                codec => "json"
            }
        }
        else if [program] == "seg" {
            #stdout { codec => rubydebug }
            kafka {
                bootstrap_servers => "172.238.238.237:9092"
                topic_id => "seg"
                codec => "json"
                retries => 3
                retry_backoff_ms => 500
            }
        }
        else {
            kafka {
                bootstrap_servers => "172.238.238.237:9092"
                topic_id => "%{[program]}"
                codec => "json"
                retries => 3
                retry_backoff_ms => 500
            }
        }
    }
}
